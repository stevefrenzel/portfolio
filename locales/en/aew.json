{
  "headings": {
    "description": "Description",
    "technologies": "Tech Stack",
    "purpose-and-goal": "Purpose & Goal",
    "tech-stack": "Tech Stack",
    "challenges-and-problems": "Challenges & Problems",
    "conclusion": "Conclusion"
  },
  "overview": {
    "short": "Website for german record label",
    "p-1": "<0>Together with three friends I founded the record company <1>AUF EWIG WINTER</1> at the end of 2019, which serves as a place to collect all information about our artists from the fields of metal, lo-fi and hip hop / rap. Since we needed our own website and email address in addition to the usual social media presences for a professional outward appearance, I took care of the implementation. At that time I was working a lot with <2>Vue.js</2>, which is why I chose this technology, also because it offered routing possibilities, as well as integrated CSS animations.</0>"
  },
  "purpose-and-goal": {
    "p-2": "<0>That website serves as an official source of information about our work as a record company <1>AUF EWIG WINTER</1>. Besides the digital and physical distribution of music, we also offer merchandise (t-shirts & hoodies). We also have a podcast which is released at regular intervals. All this information should be as easy to find as possible and presented in the appropriate black/red aesthetic. Especially the already published music and videos should be accessible with a few clicks.</0>"
  },
  "tech-stack": {
    "p-3": "<0>Before I started programming, I first created a design in <1>Figma</1>, which I later used as a guide. I wasn't very familiar with it yet, so I only created a rough draft for the desktop version. For subsequent projects, I first wrote down the structure and then started designing for the mobile version. This approach is called <2>mobile first</2> and has the advantage that you quickly find out which elements are essential and how best to arrange them.</0>",
    "p-4": "<0>For the implementation I used <1>Vue.js</1>, which is a JavaScript framework. It has a relatively flat learning curve, especially since I already had experience with <2>React</2>. Thanks to <3>Vue Router</3>, creating separate pages for the artists was very easy, for which I created several reusable components to follow the <4>DRY principle</4>. For instance a component that displays the respective Spotify player and availability on other streaming platforms per release.</0>"
  },
  "challenges-and-problems": {
    "p-5": "<0>One of the biggest challenges for me in this project was to reduce the file size of the final website as much as possible. Again, <1>Vue.js</1> has an internal solution, namely <2>lazy loading</2> of components. In practice, this means that, for example, the artist pages are only loaded when you select them. Another challenge was deploying the website through <3>Netlify</3>. It is generally very easy with this service, but a bit more complicated once the domain does not come directly from <4>Netlify</4>, but in this case from <5>Strato</5>.</0>",
    "p-6": "<0>After this worked, however, another problem arose: If you wanted to navigate directly to one of the subpages (for example <1>aufewigwinter.de/kora-winter</1>), you saw a 404 page because the redirect failed. I was able to fix this by creating a corresponding netlify.toml. This file is prioritised by <2>Netlify</2> during the deployment process and tells them that a redirect will go to the relevant index.html and sends a status code 200.</0>",
    "p-7": "The last big challenge was to create some reusable components, as I wanted to add new content quickly and easily in the future without having to edit several places in the application. These components are, so to speak, templates with ready-made structure, logic and styling, which I only have to provide with the corresponding information in a few places. In the end, there are five of them, some of which are nested within each other:"
  },
  "conclusion": {
    "bullet-points": {
      "bp-1": "<0>it is not clear at a glance what <1>AUF EWIG WINTER</1> is at all</0>",
      "bp-2": "there is too little information about the record company itself and the artists",
      "bp-3": "users have to click through first to get to the content",
      "bp-4": "<0>short description of <1>AUF EWIG WINTER</1> on the start page, as well as the latest release to listen to and watch</0>",
      "bp-5": "automatic language detection and manual language selection possible (English and German)",
      "bp-6": "artist pages will contain more info about the artist, as well as about the releases"
    },
    "p-8": "<0>Thanks to this project, I was able to learn a lot about <1>Vue.js</1> and <2>Netlify</2> and how to optimize the two technologies for production. Unfortunately, I am not 100% satisfied with this version of the website, which is mainly related to the structure. My biggest criticisms are that:</0>",
    "p-9": "<0>For this reason, I will create a revised version with <1>Next.js</1>, as it is very user-friendly for developers, has many useful functions and it generates statically generated HTML files. This means in practice that the perceived speed for users is higher and the file sizes are smaller. I will make the following structural changes:</0>"
  }
}
